// ===========================================================
// Archivo: controllers/dashboard.controller.js
// Descripci√≥n: Controlador que maneja las consultas para los
// dashboards de Supervisor y T√©cnico.
// Cada m√©todo llama a su respectiva funci√≥n en el modelo
// Dashboard, manteniendo separaci√≥n de responsabilidades.
// ===========================================================

const Dashboard = require('../models/dashboard.model');

// üìä 1. Estados de los reportes con conteo y rango de fechas (Supervisor)
exports.getEstadoReportes = async (req, res) => {
  try {
    const { fechaInicio, fechaFin } = req.query;
    const data = await Dashboard.getEstadoReportes(fechaInicio, fechaFin);
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getEstadoReportes:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener estados de reportes' });
  }
};

// üìä 2. Carga de reportes por t√©cnico y por d√≠a (Supervisor)
exports.getCargaReportesTecnico = async (req, res) => {
  try {
    const { fechaInicio, fechaFin } = req.query;
    const data = await Dashboard.getCargaReportesTecnico(fechaInicio, fechaFin);
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getCargaReportesTecnico:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener carga de reportes' });
  }
};

// üìä 3. Reportes del d√≠a actual (Supervisor)
exports.getReportesHoy = async (req, res) => {
  try {
    const data = await Dashboard.getReportesHoy();
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getReportesHoy:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener reportes del d√≠a' });
  }
};

// üìä 4. T√©cnicos con asignaci√≥n y disponibles (Supervisor)
exports.getTecnicosDisponibles = async (req, res) => {
  try {
    const data = await Dashboard.getTecnicosDisponibles();
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getTecnicosDisponibles:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener t√©cnicos disponibles' });
  }
};

// üìä 5. Reportes por centro de costo (Supervisor)
exports.getReportesCentroCosto = async (req, res) => {
  try {
    const data = await Dashboard.getReportesCentroCosto();
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getReportesCentroCosto:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener reportes por centro de costo' });
  }
};

// üìä 6. Reportes asignados del d√≠a actual (T√©cnico)
exports.getReportesTecnicoHoy = async (req, res) => {
  try {
    const { rut } = req.params;
    const data = await Dashboard.getReportesTecnicoHoy(rut);
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getReportesTecnicoHoy:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener reportes del t√©cnico' });
  }
};

// üìä 7. Historial de reportes del t√©cnico en rango de fechas (T√©cnico)
exports.getHistorialTecnico = async (req, res) => {
  try {
    const { rut, fechaInicio, fechaFin } = req.query;
    const data = await Dashboard.getHistorialTecnico(rut, fechaInicio, fechaFin);
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getHistorialTecnico:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener historial de reportes' });
  }
};

// üìä 8. Estados de reportes del t√©cnico (T√©cnico)
exports.getEstadoReportesTecnico = async (req, res) => {
  try {
    const { rut } = req.params;
    const data = await Dashboard.getEstadoReportesTecnico(rut);
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getEstadoReportesTecnico:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener estados de reportes del t√©cnico' });
  }
};

// üìä 9. Programaci√≥n de la semana actual (T√©cnico)
exports.getProgramacionSemana = async (req, res) => {
  try {
    const { rut } = req.params;
    const data = await Dashboard.getProgramacionSemana(rut);
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error en getProgramacionSemana:', err.message);
    res.status(500).json({ mensaje: 'Error al obtener programaci√≥n de la semana' });
  }
};
